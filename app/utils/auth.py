import streamlit as st
import bcrypt
import re
import hashlib
import time
import os
import json
import platform
from sqlalchemy import text
from app.database.local_connection import db_manager, get_user_by_username, get_user_by_email, create_user
from app.utils.styles import get_login_css
from app.utils.validation import DataValidator, SecurityHelper
from app.utils.security_monitor import SecurityMonitor
from datetime import datetime, timedelta

def get_device_fingerprint():
    """Gera um fingerprint √∫nico do dispositivo baseado em caracter√≠sticas do navegador e sistema"""
    try:
        # Obter informa√ß√µes do navegador via JavaScript
        user_agent = st.context.headers.get("user-agent", "unknown")
        
        # Obter informa√ß√µes adicionais se dispon√≠veis
        accept_language = st.context.headers.get("accept-language", "unknown")
        accept_encoding = st.context.headers.get("accept-encoding", "unknown")
        
        # Informa√ß√µes do sistema (lado servidor)
        system_info = {
            "platform": platform.system(),
            "python_version": platform.python_version(),
        }
        
        # Criar fingerprint combinando informa√ß√µes
        fingerprint_data = {
            "user_agent": user_agent,
            "accept_language": accept_language,
            "accept_encoding": accept_encoding,
            "system_info": system_info,
            "timestamp": int(time.time() // 86400)  # Dia atual para permitir mudan√ßas di√°rias
        }
        
        # Gerar hash √∫nico
        fingerprint_string = json.dumps(fingerprint_data, sort_keys=True)
        device_fingerprint = hashlib.sha256(fingerprint_string.encode()).hexdigest()[:32]
        
        return device_fingerprint, user_agent
        
    except Exception as e:
        # Fallback para um fingerprint baseado apenas no user-agent
        user_agent = "unknown"
        try:
            user_agent = st.context.headers.get("user-agent", "unknown")
        except:
            pass
        
        fallback_data = f"fallback_{user_agent}_{int(time.time() // 86400)}"
        device_fingerprint = hashlib.sha256(fallback_data.encode()).hexdigest()[:32]
        
        return device_fingerprint, user_agent

def get_client_ip():
    """Obt√©m o IP do cliente"""
    try:
        # Tentar obter IP real atrav√©s de headers
        forwarded_for = st.context.headers.get("x-forwarded-for")
        if forwarded_for:
            return forwarded_for.split(',')[0].strip()
        
        real_ip = st.context.headers.get("x-real-ip")
        if real_ip:
            return real_ip
        
        # Fallback
        return st.context.headers.get("host", "unknown")
        
    except Exception:
        return "unknown"

def is_trusted_device(user_id, device_fingerprint):
    """Verifica se o dispositivo √© confi√°vel para o usu√°rio"""
    try:
        with db_manager.get_db_session() as session:
            result = session.execute(
                text("""
                SELECT COUNT(*) as count FROM user_sessions 
                WHERE user_id = :user_id 
                AND device_fingerprint = :device_fingerprint 
                AND is_trusted = 1
                AND created_at > datetime('now', '-90 days')
                """),
                {
                    "user_id": user_id,
                    "device_fingerprint": device_fingerprint
                }
            ).fetchone()
            
            return result.count > 0 if result else False
            
    except Exception as e:
        # Em caso de erro, considerar dispositivo n√£o confi√°vel
        return False

def check_device_matches_session(user_id, device_fingerprint):
    """Verifica se o dispositivo atual corresponde √† sess√£o ativa do usu√°rio"""
    try:
        session_token = st.session_state.get('session_token')
        if not session_token:
            return False
            
        with db_manager.get_db_session() as session:
            result = session.execute(
                text("""
                SELECT COUNT(*) as count FROM user_sessions 
                WHERE user_id = :user_id 
                AND session_token = :session_token
                AND device_fingerprint = :device_fingerprint 
                AND is_active = 1
                AND expires_at > datetime('now')
                """),
                {
                    "user_id": user_id,
                    "session_token": session_token,
                    "device_fingerprint": device_fingerprint
                }
            ).fetchone()
            
            return result.count > 0 if result else False
            
    except Exception as e:
        # Em caso de erro, considerar dispositivo n√£o correspondente
        return False

def check_authentication():
    """Verifica se o usu√°rio est√° autenticado e se o dispositivo √© confi√°vel"""
    
    try:
        # Inicializar vari√°veis de sess√£o se n√£o existirem
        if 'authenticated' not in st.session_state:
            st.session_state.authenticated = False
        
        if 'user_id' not in st.session_state:
            st.session_state.user_id = None
        
        if 'username' not in st.session_state:
            st.session_state.username = None
        
        if 'device_verified' not in st.session_state:
            st.session_state.device_verified = False
        
        # Obter fingerprint do dispositivo atual
        device_fingerprint, user_agent = get_device_fingerprint()
        st.session_state.device_fingerprint = device_fingerprint
        st.session_state.user_agent = user_agent
        
        # REGRA PRINCIPAL: Se o usu√°rio j√° est√° autenticado na sess√£o atual, permitir acesso
        # Isso evita re-autentica√ß√£o desnecess√°ria ao atualizar a p√°gina
        if ('authenticated' in st.session_state and st.session_state.authenticated) and \
           ('user_info' in st.session_state and st.session_state.user_info):
            
            # Se j√° est√° autenticado, verificar dispositivo apenas uma vez por sess√£o
            if not st.session_state.device_verified:
                user_id = st.session_state.user_info.get('id')
                if user_id:
                    # Verificar se √© um dispositivo confi√°vel ou se corresponde √† sess√£o atual
                    if (is_trusted_device(user_id, device_fingerprint) or 
                        check_device_matches_session(user_id, device_fingerprint)):
                        st.session_state.device_verified = True
                    else:
                        # Marcar como verificado mesmo para dispositivos n√£o confi√°veis
                        # se o usu√°rio j√° estava logado (evita logout em refresh)
                        st.session_state.device_verified = True
            
            return True
        
        # Se n√£o est√° na sess√£o atual, verificar persist√™ncia de sess√£o
        if check_persistent_session():
            # Verificar dispositivo ap√≥s restaurar sess√£o
            user_id = st.session_state.user_info.get('id') if 'user_info' in st.session_state else None
            if user_id:
                # Para sess√µes restauradas, verificar se o dispositivo √© o mesmo da sess√£o
                if check_device_matches_session(user_id, device_fingerprint):
                    st.session_state.device_verified = True
                    return True
                elif is_trusted_device(user_id, device_fingerprint):
                    st.session_state.device_verified = True
                    return True
                else:
                    # Dispositivo n√£o confi√°vel - invalidar sess√£o restaurada APENAS
                    # se for realmente um novo dispositivo (n√£o um refresh)
                    st.session_state.authenticated = False
                    st.session_state.device_verified = False
                    if 'session_token' in st.session_state:
                        del st.session_state.session_token
                    st.warning("üîí Insira suas credenciais.")
        
        # Se nenhuma verifica√ß√£o passou, exibir formul√°rio de login/registro
        show_auth_form()
        
        return False
    except Exception as e:
        st.error(f"‚ö†Ô∏è Erro no sistema de autentica√ß√£o: {e}")
        return False

def check_persistent_session():
    """Verifica se existe uma sess√£o persistente v√°lida"""
    try:
        # Verificar se existe token de sess√£o no session_state
        session_token = st.session_state.get('session_token')
        
        # Se n√£o h√° token no session_state, tentar encontrar uma sess√£o ativa mais recente
        if not session_token:
            # Buscar a sess√£o mais recente que ainda est√° ativa
            with db_manager.get_db_session() as session:
                result = session.execute(
                    text("""
                    SELECT us.session_token, u.username, u.full_name, u.role, us.expires_at, u.id
                    FROM users u 
                    JOIN user_sessions us ON u.id = us.user_id 
                    WHERE us.expires_at > datetime('now') AND us.is_active = 1
                    ORDER BY us.last_accessed DESC
                    LIMIT 1
                    """)
                ).fetchone()
                
                if result:
                    session_token = result.session_token
                    # Restaurar sess√£o completa
                    st.session_state.authenticated = True
                    st.session_state.username = result.username
                    st.session_state.user_info = {
                        'id': result.id,
                        'username': result.username,
                        'full_name': result.full_name,
                        'role': result.role
                    }
                    st.session_state.session_token = session_token
                    
                    # Atualizar √∫ltimo acesso
                    session.execute(
                        text("UPDATE user_sessions SET last_accessed = datetime('now') WHERE session_token = :token"),
                        {"token": session_token}
                    )
                    session.commit()
                    
                    return True
        
        elif session_token:
            # Verificar se o token √© v√°lido no banco de dados
            with db_manager.get_db_session() as session:
                result = session.execute(
                    text("""
                    SELECT u.username, u.full_name, u.role, us.expires_at, u.id
                    FROM users u 
                    JOIN user_sessions us ON u.id = us.user_id 
                    WHERE us.session_token = :token AND us.expires_at > datetime('now') AND us.is_active = 1
                    """),
                    {"token": session_token}
                ).fetchone()
                
                if result:
                    # Restaurar sess√£o
                    st.session_state.authenticated = True
                    st.session_state.username = result.username
                    st.session_state.user_info = {
                        'id': result.id,
                        'username': result.username,
                        'full_name': result.full_name,
                        'role': result.role
                    }
                    st.session_state.session_token = session_token
                    
                    # Atualizar √∫ltimo acesso
                    session.execute(
                        text("UPDATE user_sessions SET last_accessed = datetime('now') WHERE session_token = :token"),
                        {"token": session_token}
                    )
                    session.commit()
                    
                    return True
                else:
                    # Token inv√°lido, remover do session_state
                    if 'session_token' in st.session_state:
                        del st.session_state['session_token']
        
        return False
    except Exception as e:
        # Em caso de erro, n√£o bloquear o login mas registrar
        if 'debug_mode' in st.session_state and st.session_state.debug_mode:
            st.warning(f"‚ö†Ô∏è Erro na verifica√ß√£o de sess√£o: {e}")
        return False

def create_session_token(username, remember_me=True, trust_device=True):
    """Cria um token de sess√£o persistente com informa√ß√µes do dispositivo"""
    try:
        # Gerar token √∫nico
        timestamp = str(time.time())
        random_data = os.urandom(32).hex()
        token_data = f"{username}:{timestamp}:{random_data}"
        session_token = hashlib.sha256(token_data.encode()).hexdigest()
        
        # Definir expira√ß√£o (30 dias)
        expires_at = datetime.now() + timedelta(days=30)
        
        # Buscar ID do usu√°rio
        user = get_user_by_username(username)
        
        if user:
            user_id = user['id']
            
            # Obter informa√ß√µes do dispositivo e sess√£o
            device_fingerprint, user_agent = get_device_fingerprint()
            ip_address = get_client_ip()
            
            with db_manager.get_db_session() as session:
                # Invalidar sess√µes antigas do usu√°rio
                session.execute(
                    text("UPDATE user_sessions SET is_active = 0 WHERE user_id = :user_id"),
                    {"user_id": user_id}
                )
                
                # Criar nova sess√£o
                session.execute(
                    text("""
                    INSERT INTO user_sessions (user_id, session_token, expires_at, created_at, last_accessed, is_active, 
                                             user_agent, ip_address, device_fingerprint, is_trusted)
                    VALUES (:user_id, :token, :expires_at, datetime('now'), datetime('now'), 1, 
                            :user_agent, :ip_address, :device_fingerprint, :is_trusted)
                    """),
                    {
                        "user_id": user_id,
                        "token": session_token,
                        "expires_at": expires_at.isoformat(),
                        "user_agent": user_agent,
                        "ip_address": ip_address,
                        "device_fingerprint": device_fingerprint,
                        "is_trusted": 1 if trust_device else 0
                    }
                )
                session.commit()
            
            # Armazenar informa√ß√µes na sess√£o
            st.session_state.device_fingerprint = device_fingerprint
            st.session_state.device_verified = True
            
            return session_token
        
        return None
    except Exception as e:
        st.error(f"Erro ao criar sess√£o: {e}")
        return None

def show_auth_form():
    """Exibe o formul√°rio de login e registro"""
    
    # CSS para login
    st.markdown(get_login_css(), unsafe_allow_html=True)
    
    # Container principal centralizado
    col1, col2, col3 = st.columns([1, 2, 1])
    
    with col2:
        # Cabe√ßalho elegante
        st.markdown("""
        <div style="text-align: center; padding: 2rem 0;">
            <h1 style="color: #2E86AB; margin-bottom: 0.5rem;">‚õ™ M√≠dia Church</h1>
            <p style="color: #666; font-size: 1.1rem; margin-bottom: 2rem;">Sistema de Gerenciamento</p>
        </div>
        """, unsafe_allow_html=True)
        
        # Tabs estilizadas para Login, Registro e Recupera√ß√£o
        tab1, tab2, tab3 = st.tabs(["üîë Entrar", "üìù Criar Conta", "üîÑ Recuperar Senha"])
        
        with tab1:
            show_login_tab()
        
        with tab2:
            show_register_tab()
            
        with tab3:
            show_password_recovery_tab()
        
        # Rodap√© informativo
        st.markdown("""
        <div style="text-align: center; margin-top: 2rem; padding-top: 1rem; border-top: 1px solid #eee;">
            <small style="color: #888;">
                üîí Suas informa√ß√µes est√£o seguras e protegidas<br>
                üí° Problemas para acessar? Entre em contato com o administrador
            </small>
        </div>
        """, unsafe_allow_html=True)

def show_login_tab():
    """Exibe a aba de login"""
    
    st.markdown("### üîê Acesse sua conta")
    st.markdown("*Digite suas credenciais para entrar no sistema*")
    
    with st.form("login_form", clear_on_submit=False):
        # Campos de entrada com √≠cones
        username = st.text_input(
            "üë§ Usu√°rio", 
            placeholder="Digite seu nome de usu√°rio",
            help="Use o nome de usu√°rio criado no registro"
        )
        password = st.text_input(
            "üîí Senha", 
            type="password",
            placeholder="Digite sua senha",
            help="Sua senha √© case-sensitive"
        )
        
        # Op√ß√£o de lembrar login
        remember_me = st.checkbox("üîÑ Manter-me conectado", value=True)
        
        # Checkbox para confiar no dispositivo
        trust_device = st.checkbox("üì± Confiar neste dispositivo", 
                                 help="Marque esta op√ß√£o para n√£o precisar fazer login novamente neste dispositivo",
                                 key="trust_device")
        
        # Bot√£o de login estilizado
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            submit_button = st.form_submit_button(
                "üöÄ Entrar no Sistema", 
                use_container_width=True,
                type="primary"
            )
        
        if submit_button:
            # Valida√ß√£o b√°sica
            if not username or not password:
                st.error("‚ö†Ô∏è Por favor, preencha todos os campos!")
                return
            
            # Mostrar indicador de carregamento
            with st.spinner("üîç Verificando credenciais..."):
                try:
                    # Sanitizar entrada
                    username = DataValidator.sanitize_string(username, 30)
                    
                    # Verificar rate limiting
                    if not SecurityHelper.check_rate_limit(username, "LOGIN_ATTEMPT", 5, 15):
                        st.error("üö´ Muitas tentativas de login. Tente novamente em 15 minutos.")
                        SecurityHelper.log_security_event("LOGIN_RATE_LIMITED", f"Rate limit exceeded for user: {username}", username)
                        return
                    
                    # Registrar tentativa de login
                    SecurityHelper.log_security_event("LOGIN_ATTEMPT", f"Login attempt for user: {username}", username)
                    
                    if authenticate_user(username, password):
                        st.session_state.authenticated = True
                        st.session_state.username = username
                        
                        # Criar sess√£o persistente se solicitado
                        if remember_me:
                            session_token = create_session_token(username, remember_me=True, trust_device=trust_device)
                            if session_token:
                                st.session_state.session_token = session_token
                        
                        SecurityHelper.log_security_event("LOGIN_SUCCESS", f"Successful login for user: {username}", username)
                        
                        # Feedback de sucesso
                        st.success("‚úÖ Login realizado com sucesso!")
                        
                        # Pequeno delay para mostrar o sucesso
                        time.sleep(1)
                        st.rerun()
                    else:
                        SecurityHelper.log_security_event("LOGIN_FAILED", f"Failed login attempt for user: {username}", username)
                        st.error("‚ùå Usu√°rio ou senha incorretos!")
                        st.info("üí° Verifique se digitou corretamente ou crie uma nova conta na aba 'Criar Conta'")
                        
                except Exception as e:
                    st.error(f"‚ö†Ô∏è Erro durante o login: {e}")
                    st.info("üîß Se o problema persistir, entre em contato com o administrador")
    
    # Links √∫teis
    st.markdown("---")
    col1, col2 = st.columns(2)
    with col1:
        if st.button("‚ùì Esqueci minha senha", use_container_width=True):
            st.info("üîß Funcionalidade de recupera√ß√£o de senha em desenvolvimento")
    with col2:
        if st.button("üë• Primeiro acesso?", use_container_width=True):
            st.info("üìù Use a aba 'Criar Conta' para se registrar")

def show_register_tab():
    """Exibe a aba de registro"""
    
    st.markdown("### üìù Criar nova conta")
    st.markdown("*Preencha os dados abaixo para se cadastrar no sistema*")
    
    with st.form("register_form", clear_on_submit=False):
        # Informa√ß√µes b√°sicas
        st.markdown("#### üë§ Informa√ß√µes Pessoais")
        
        col1, col2 = st.columns(2)
        with col1:
            full_name = st.text_input(
                "üìõ Nome Completo *", 
                placeholder="Seu nome completo",
                help="Digite seu nome completo como aparece nos documentos"
            )
        with col2:
            username = st.text_input(
                "üè∑Ô∏è Nome de Usu√°rio *", 
                placeholder="Escolha um nome √∫nico",
                help="Apenas letras, n√∫meros e underscore. M√≠n. 3 caracteres"
            )
        
        email = st.text_input(
            "üìß Email *", 
            placeholder="seu.email@exemplo.com",
            help="Ser√° usado para comunica√ß√µes importantes"
        )
        
        # Informa√ß√µes de seguran√ßa
        st.markdown("#### üîê Seguran√ßa")
        
        col1, col2 = st.columns(2)
        with col1:
            password = st.text_input(
                "üîí Senha *", 
                type="password",
                placeholder="Crie uma senha forte",
                help="M√≠n. 8 caracteres com letras, n√∫meros e s√≠mbolos"
            )
        with col2:
            confirm_password = st.text_input(
                "üîí Confirmar Senha *", 
                type="password",
                placeholder="Digite a senha novamente",
                help="Deve ser id√™ntica √† senha anterior"
            )
        
        # Informa√ß√µes opcionais
        st.markdown("#### üìû Informa√ß√µes Adicionais (Opcional)")
        phone = st.text_input(
            "üì± Telefone", 
            placeholder="(11) 99999-9999",
            help="Formato: (XX) XXXXX-XXXX"
        )
        
        # Termos e condi√ß√µes
        st.markdown("---")
        terms_accepted = st.checkbox(
            "‚úÖ Aceito os termos de uso e pol√≠tica de privacidade",
            help="Obrigat√≥rio para criar a conta"
        )
        
        # Bot√£o de registro
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            submit_button = st.form_submit_button(
                "üéâ Criar Minha Conta", 
                use_container_width=True,
                type="primary"
            )
        
        if submit_button:
            # Valida√ß√£o de termos
            if not terms_accepted:
                st.error("‚ö†Ô∏è Voc√™ deve aceitar os termos de uso para continuar!")
                return
            
            # Mostrar indicador de carregamento
            with st.spinner("üîÑ Criando sua conta..."):
                try:
                    # Sanitizar entradas
                    full_name = DataValidator.sanitize_string(full_name, 100)
                    username = DataValidator.sanitize_string(username, 30)
                    email = DataValidator.sanitize_string(email, 255)
                    phone = DataValidator.sanitize_string(phone, 20) if phone else None
                    
                    # Valida√ß√µes
                    errors = []
                    
                    if not all([full_name, username, email, password, confirm_password]):
                        errors.append("‚ö†Ô∏è Preencha todos os campos obrigat√≥rios!")
                    
                    # Validar nome de usu√°rio
                    username_validation = DataValidator.validate_username(username)
                    if not username_validation["valid"]:
                        errors.extend([f"üë§ {error}" for error in username_validation["errors"]])
                    
                    # Validar email
                    if not DataValidator.validate_email(email):
                        errors.append("üìß Email inv√°lido!")
                    
                    # Validar senha
                    password_validation = DataValidator.validate_password(password)
                    if not password_validation["valid"]:
                        errors.extend([f"üîí {error}" for error in password_validation["errors"]])
                    
                    if password != confirm_password:
                        errors.append("üîí As senhas n√£o coincidem!")
                    
                    # Validar telefone se fornecido
                    if phone and not DataValidator.validate_phone(phone):
                        errors.append("üì± N√∫mero de telefone inv√°lido!")
                    
                    # Verificar se usu√°rio j√° existe
                    if not errors:
                        if user_exists(username, email):
                            errors.append("üë• Usu√°rio ou email j√° cadastrado!")
                    
                    if errors:
                        st.error("‚ùå Corrija os seguintes problemas:")
                        for error in errors:
                            st.write(f"‚Ä¢ {error}")
                        SecurityHelper.log_security_event("REGISTRATION_FAILED", f"Failed registration attempt for username: {username}, email: {email}")
                    else:
                        # Criar usu√°rio
                        if create_user_auth(username, email, password, full_name, phone):
                            SecurityHelper.log_security_event("REGISTRATION_SUCCESS", f"New user registered: {username}")
                            
                            # Enviar email de boas-vindas
                            email_sent = False
                            try:
                                from app.utils.email_service import send_welcome_email
                                email_result = send_welcome_email(email, username, full_name)
                                if email_result['success']:
                                    email_sent = True
                            except Exception:
                                # N√£o bloquear registro por erro de email
                                pass
                            
                            # Feedback de sucesso
                            st.success("üéâ Conta criada com sucesso!")
                            if email_sent:
                                st.info("üìß Email de boas-vindas enviado!")
                            st.info("‚ú® Agora voc√™ pode fazer login na aba 'Entrar'")
                            st.balloons()
                            
                            # Limpar formul√°rio ap√≥s sucesso
                            time.sleep(2)
                            st.rerun()
                        else:
                            SecurityHelper.log_security_event("REGISTRATION_ERROR", f"Database error during registration for username: {username}")
                            st.error("‚ùå Erro ao criar conta. Tente novamente.")
                            
                except Exception as e:
                    st.error(f"‚ö†Ô∏è Erro durante o registro: {e}")
                    st.info("üîß Se o problema persistir, entre em contato com o administrador")
    
    # Informa√ß√µes adicionais
    st.markdown("---")
    with st.expander("‚ÑπÔ∏è Informa√ß√µes sobre o registro"):
        st.markdown("""
        **üîí Seguran√ßa dos dados:**
        - Suas informa√ß√µes s√£o criptografadas e protegidas
        - Senhas s√£o armazenadas com hash seguro
        - Nunca compartilhamos seus dados pessoais
        
        **üìß Comunica√ß√µes:**
        - Enviaremos apenas notifica√ß√µes importantes
        - Voc√™ pode cancelar a inscri√ß√£o a qualquer momento
        
        **‚ùì D√∫vidas:**
        - Entre em contato com o administrador do sistema
        - Suporte t√©cnico dispon√≠vel durante hor√°rio comercial
        """)

def authenticate_user(username, password):
    """Autentica usu√°rio com rate limiting e logs de seguran√ßa"""
    try:
        # Verificar rate limiting
        if not SecurityHelper.check_rate_limit(username, "LOGIN_ATTEMPT", 5, 15):
            return False
        
        # Buscar usu√°rio
        user = get_user_by_username(username)
        
        if user and user.get('is_active', True) and bcrypt.checkpw(password.encode('utf-8'), user['password_hash'].encode('utf-8')):
            # Login bem-sucedido
            
            # Armazenar informa√ß√µes do usu√°rio na sess√£o
            st.session_state.user_info = {
                'id': user['id'],
                'username': user['username'],
                'full_name': user['full_name'],
                'role': user['role']
            }
            return True
        else:
            # Login falhou
            return False
                
    except Exception as e:
        st.error(f"Erro na autentica√ß√£o: {e}")
        return False

def user_exists(username, email):
    """Verifica se um usu√°rio j√° existe"""
    try:
        # Verificar por username
        user_by_username = get_user_by_username(username)
        if user_by_username:
            return True
            
        # Verificar por email
        user_by_email = get_user_by_email(email)
        if user_by_email:
            return True
            
        return False
    except Exception as e:
        st.error(f"Erro ao verificar usu√°rio: {e}")
        return True  # Em caso de erro, assume que existe para evitar duplicatas

def create_user_auth(username, email, password, full_name, phone=None):
    """Cria um novo usu√°rio (fun√ß√£o local do auth.py)"""
    try:
        # Hash da senha
        password_hash = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')
        
        # Usar a fun√ß√£o do local_connection
        user_id = create_user(username, email, password_hash, full_name, phone, 'member')
        return user_id is not None
    except Exception as e:
        st.error(f"Erro ao criar usu√°rio: {e}")
        return False

def logout():
    """Faz logout do usu√°rio"""
    try:
        # Invalidar sess√£o persistente se existir
        session_token = st.session_state.get('session_token')
        if session_token:
            # Usar db_manager para invalidar sess√£o
            with db_manager.get_db_session() as session:
                session.execute(
                    text("UPDATE user_sessions SET is_active = 0 WHERE session_token = :token"),
                    {"token": session_token}
                )
                session.commit()
            
        # Limpar query params
        if 'session_token' in st.query_params:
            del st.query_params['session_token']
            
    except Exception as e:
        # Continuar com logout mesmo se houver erro
        pass
    
    # Limpar session state
    for key in list(st.session_state.keys()):
        del st.session_state[key]
    st.rerun()

def get_current_user():
    """Retorna informa√ß√µes do usu√°rio atual"""
    return st.session_state.get('user_info', {})

def is_admin():
    """Verifica se o usu√°rio atual √© administrador"""
    try:
        user_info = get_current_user()
        return user_info.get('role') == 'admin'
    except Exception:
        return False

def get_user_role():
    """Retorna o papel/role do usu√°rio atual"""
    try:
        user_info = get_current_user()
        return user_info.get('role', 'guest')
    except Exception:
        return 'guest'

def require_auth():
    """Fun√ß√£o para exigir autentica√ß√£o - retorna True se autenticado"""
    return check_authentication()

def require_admin():
    """Decorator/fun√ß√£o para exigir privil√©gios de administrador"""
    if not is_admin():
        st.error("üö´ Acesso negado! Esta funcionalidade requer privil√©gios de administrador.")
        st.stop()
    return True

def show_password_recovery_tab():
    """Exibe a aba de recupera√ß√£o de senha"""
    
    st.markdown("### üîÑ Recuperar Senha")
    st.markdown("*Digite seu email para receber instru√ß√µes de recupera√ß√£o*")
    
    with st.form("password_recovery_form", clear_on_submit=False):
        email = st.text_input(
            "üìß Email", 
            placeholder="Digite o email cadastrado",
            help="Enviaremos um link de recupera√ß√£o para este email"
        )
        
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            submit_button = st.form_submit_button(
                "üì§ Enviar Link de Recupera√ß√£o", 
                use_container_width=True,
                type="primary"
            )
        
        if submit_button:
            if not email:
                st.error("‚ö†Ô∏è Por favor, digite seu email!")
                return
            
            if not DataValidator.validate_email(email):
                st.error("üìß Email inv√°lido!")
                return
            
            with st.spinner("üì§ Enviando email de recupera√ß√£o..."):
                if send_password_recovery_email(email):
                    st.success("‚úÖ Email de recupera√ß√£o enviado!")
                    st.info("üìß Verifique sua caixa de entrada e spam")
                    st.info("üîó O link de recupera√ß√£o expira em 1 hora")
                else:
                    st.error("‚ùå Email n√£o encontrado ou erro no envio")
    
    st.markdown("---")
    with st.expander("‚ÑπÔ∏è Como funciona a recupera√ß√£o"):
        st.markdown("""
        **üìß Processo de recupera√ß√£o:**
        1. Digite o email cadastrado na sua conta
        2. Receba um link seguro por email
        3. Clique no link para definir nova senha
        4. O link expira em 1 hora por seguran√ßa
        
        **üîí Seguran√ßa:**
        - Links s√£o √∫nicos e tempor√°rios
        - Apenas voc√™ pode acessar com seu email
        - Senhas antigas s√£o invalidadas
        
        **‚ùì Problemas:**
        - Verifique a pasta de spam
        - Certifique-se de usar o email correto
        - Entre em contato com o administrador se necess√°rio
        """)

def send_password_recovery_email(email):
    """Envia email de recupera√ß√£o de senha"""
    try:
        # Verificar se email existe
        user = get_user_by_email(email)
        
        if not user:
            return False
        
        user_id = user['id']
        username = user['username']
        full_name = user['full_name']
        
        # Gerar token de recupera√ß√£o
        recovery_token = generate_recovery_token(user_id)
        
        if not recovery_token:
            return False
        
        # Enviar email
        try:
            from app.utils.email_service import send_password_recovery_email as send_email
            email_result = send_email(email, username, full_name, recovery_token)
            return email_result.get('success', False)
        except Exception:
            # Se n√£o conseguir enviar email, ainda retorna True para n√£o revelar se email existe
            return True
            
    except Exception as e:
        st.error(f"Erro no processo de recupera√ß√£o: {e}")
        return False

def generate_recovery_token(user_id):
    """Gera token de recupera√ß√£o de senha"""
    try:
        # Gerar token √∫nico
        timestamp = str(time.time())
        random_data = os.urandom(32).hex()
        token_data = f"{user_id}:{timestamp}:{random_data}"
        recovery_token = hashlib.sha256(token_data.encode()).hexdigest()
        
        # Definir expira√ß√£o (1 hora)
        expires_at = datetime.now() + timedelta(hours=1)
        
        with db_manager.get_db_session() as session:
            # Invalidar tokens antigos do usu√°rio
            session.execute(
                text("UPDATE password_recovery_tokens SET is_active = 0 WHERE user_id = :user_id"),
                {"user_id": user_id}
            )
            
            # Criar novo token
            session.execute(
                text("""
                INSERT INTO password_recovery_tokens (user_id, token, expires_at, created_at, is_active)
                VALUES (:user_id, :token, :expires_at, datetime('now'), 1)
                """),
                {
                    "user_id": user_id,
                    "token": recovery_token,
                    "expires_at": expires_at.isoformat()
                }
            )
            session.commit()
        
        return recovery_token
        
    except Exception as e:
        st.error(f"Erro ao gerar token: {e}")
        return None

def create_password_recovery_table():
    """Cria tabela para tokens de recupera√ß√£o de senha"""
    try:
        with db_manager.get_db_session() as session:
            session.execute(text("""
            CREATE TABLE IF NOT EXISTS password_recovery_tokens (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id TEXT NOT NULL,
                token TEXT NOT NULL UNIQUE,
                expires_at TEXT NOT NULL,
                created_at TEXT DEFAULT CURRENT_TIMESTAMP,
                used_at TEXT NULL,
                is_active INTEGER DEFAULT 1,
                FOREIGN KEY (user_id) REFERENCES users (id)
            )
            """))
            
            # √çndices para performance
            session.execute(text("CREATE INDEX IF NOT EXISTS idx_recovery_tokens_user_id ON password_recovery_tokens(user_id)"))
            session.execute(text("CREATE INDEX IF NOT EXISTS idx_recovery_tokens_token ON password_recovery_tokens(token)"))
            session.execute(text("CREATE INDEX IF NOT EXISTS idx_recovery_tokens_expires ON password_recovery_tokens(expires_at)"))
            session.commit()
        
        return True
    except Exception as e:
        st.error(f"Erro ao criar tabela de recupera√ß√£o: {str(e)}")
        return False

def create_user_sessions_table():
    """Cria tabela para sess√µes de usu√°rio com suporte a dispositivos"""
    try:
        with db_manager.get_db_session() as session:
            # Primeiro, verificar se a tabela existe e quais colunas tem
            result = session.execute(text("PRAGMA table_info(user_sessions)")).fetchall()
            existing_columns = [row[1] for row in result] if result else []
            
            # Criar tabela se n√£o existir
            session.execute(text("""
            CREATE TABLE IF NOT EXISTS user_sessions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id TEXT NOT NULL,
                session_token TEXT NOT NULL UNIQUE,
                expires_at TEXT NOT NULL,
                created_at TEXT DEFAULT CURRENT_TIMESTAMP,
                last_accessed TEXT DEFAULT CURRENT_TIMESTAMP,
                is_active INTEGER DEFAULT 1,
                user_agent TEXT NULL,
                ip_address TEXT NULL,
                device_fingerprint TEXT NULL,
                is_trusted INTEGER DEFAULT 0,
                device_name TEXT NULL,
                last_login_location TEXT NULL,
                FOREIGN KEY (user_id) REFERENCES users (id)
            )
            """))
            
            # Adicionar novas colunas se a tabela j√° existir mas n√£o tiver as colunas
            if existing_columns:
                if 'user_agent' not in existing_columns:
                    session.execute(text("ALTER TABLE user_sessions ADD COLUMN user_agent TEXT NULL"))
                
                if 'ip_address' not in existing_columns:
                    session.execute(text("ALTER TABLE user_sessions ADD COLUMN ip_address TEXT NULL"))
                
                if 'device_fingerprint' not in existing_columns:
                    session.execute(text("ALTER TABLE user_sessions ADD COLUMN device_fingerprint TEXT NULL"))
                
                if 'is_trusted' not in existing_columns:
                    session.execute(text("ALTER TABLE user_sessions ADD COLUMN is_trusted INTEGER DEFAULT 0"))
                
                if 'device_name' not in existing_columns:
                    session.execute(text("ALTER TABLE user_sessions ADD COLUMN device_name TEXT NULL"))
                
                if 'last_login_location' not in existing_columns:
                    session.execute(text("ALTER TABLE user_sessions ADD COLUMN last_login_location TEXT NULL"))
            
            # √çndices para performance
            session.execute(text("CREATE INDEX IF NOT EXISTS idx_user_sessions_user_id ON user_sessions(user_id)"))
            session.execute(text("CREATE INDEX IF NOT EXISTS idx_user_sessions_token ON user_sessions(session_token)"))
            session.execute(text("CREATE INDEX IF NOT EXISTS idx_user_sessions_expires ON user_sessions(expires_at)"))
            session.execute(text("CREATE INDEX IF NOT EXISTS idx_user_sessions_device ON user_sessions(device_fingerprint)"))
            session.execute(text("CREATE INDEX IF NOT EXISTS idx_user_sessions_trusted ON user_sessions(user_id, is_trusted)"))
            session.commit()
        
        # Limpar sess√µes expiradas
        cleanup_expired_sessions()
        
        return True
    except Exception as e:
        st.error(f"Erro ao criar/atualizar tabela de sess√µes: {str(e)}")
        return False

def cleanup_expired_sessions():
    """Remove sess√µes expiradas do banco de dados"""
    try:
        with db_manager.get_db_session() as session:
            # Marcar sess√µes expiradas como inativas
            session.execute(
                text("UPDATE user_sessions SET is_active = 0 WHERE expires_at <= datetime('now')")
            )
            
            # Remover sess√µes muito antigas (mais de 60 dias)
            session.execute(
                text("DELETE FROM user_sessions WHERE created_at <= datetime('now', '-60 days')")
            )
            
            session.commit()
        
        return True
    except Exception as e:
        # N√£o mostrar erro para o usu√°rio, apenas registrar
        if 'debug_mode' in st.session_state and st.session_state.debug_mode:
            st.warning(f"‚ö†Ô∏è Erro na limpeza de sess√µes: {e}")
        return False